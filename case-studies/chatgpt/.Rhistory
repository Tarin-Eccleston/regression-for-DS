catheter.df <- read.table("catheter.data", header = TRUE)
catheter.fit <- lm(ca ~ ht, data = catheter.df)
summary(catheter.fit)
# MUST Label Axis
plot(ca ~ ht, data = catheter.df, xlab = "Height (inches)", ylab = "Catheter Lenght (inches)")
abline(coef(catheter.fit)[1], coef(catheter.fit)[2])
source("~/Documents/Masters/STATS 762/Exercises/Catheter Analysis/catheter_analysis.R")
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/Exercises/Catheter Analysis")
catheter.df <- read.table("catheter.data", header = TRUE)
catheter.fit <- lm(ca ~ ht, data = catheter.df)
summary(catheter.fit)
# MUST Label Axis
plot(ca ~ ht, data = catheter.df, xlab = "Height (inches)", ylab = "Catheter Lenght (inches)")
abline(coef(catheter.fit)[1], coef(catheter.fit)[2])
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
crabs.fit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
summary(crabs.df)
xx <- seq(0, 6, length.out = 100)
yy <- predict(crabs.df, newdata = data.frame(weight = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(min(chd.df$age), max(chd.df$age), length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
# Use linear regression. Poisson regression is most suitable in this case.
# The expected value must be above 0, so linear regression doesn't give meaningful prediction sometimes.
crabs.fit <- lm(sats ~ weight, data = crabs.df)
plot(sats ~ weight, data = crabs.df)
abline(crabs.fit$coefficients[1], crabs.fit$coefficients[2])
# Poisson regression
crabs.logfit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
# We cannot plot curve in R, so use sequence.
xx <- seq(min(crabs.df$weight), max(crabs.df$weight), length.out = 101)
# The linear predictor gives log of mew. Log being the link function. To get mew, don't need to exponentiate, specify type as response.
yy <- predict(crabs.logfit, newdata = data.frame(weight = xx), type = 'response')
plot(sats ~ weight, data = crabs.df)
lines(yy ~ xx)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
# Create new matrix, age from sample, and predicted likelihood of chd to the response
cbind(chd.df$age, fitted(chd.fit))
# flipping "coin" for each person from age 20 -> 63
n.people <- nrow(chd.df)
new.chd <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
par(mfrow = c(1, 2))
plot(chd ~ age, data = chd.df, main = "Original")
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
plot(new.chd ~ age, data = chd.df, main = "Simulated")
new.fit <- glm(new.chd ~ age, family = binomial("probit"), data = chd.df)
yy <- predict(new.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
git
git init
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, type = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, family = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
summary(fit.boot)
apply(coef.boot, 2, sd)
git help
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/diagnostics-model-building")
catheter.df <- read.table("data/catheter.data", header = TRUE)
catheter_df = read.table("data/catheter.data", header = TRUE)
# get hat matrix
hmds = influence(catheter_df)$hat
# get hat matrix
catheter_fit = lm(ca ~ ht, data = catheter_df)
hmds = influence(catheter_fit)$hat
samples <- sample(1:nrow(catheter_df), replace = TRUE)
View(catheter_df)
# Load necessary libraries
library(dplyr)
# Load necessary libraries
library(tidyverse)
# Read in the data on tree presence at different altitudes
data <- read.csv("data/kauri.csv")
# Read in the data on tree presence at different altitudes
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/case-studies/chatgpt")
data <- read.csv("data/kauri.csv")
# Define the number of bootstrap samples to generate
B <- 1000
# Define the desired confidence level for the intervals
alpha <- 0.05
# Fit a logistic regression model to the data
model <- glm(presence ~ altitude, data = data, family = binomial)
# Generate the bootstrap samples
samples <- matrix(0, nrow = B, ncol = nrow(data))
for (i in 1:B) {
samples[i, ] <- sample(1:nrow(data), replace = TRUE)
}
# Load necessary libraries
library(tidyverse)
# Read in the data on tree presence at different altitudes
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/case-studies/chatgpt")
data <- read.csv("data/kauri.csv")
# Define the number of bootstrap samples to generate
B <- 1000
# Define the desired confidence level for the intervals
alpha <- 0.05
# Fit a logistic regression model to the data
model <- glm(presence ~ altitude, data = data, family = binomial)
# Generate the bootstrap samples
samples <- matrix(0, nrow = B, ncol = nrow(data))
for (i in 1:B) {
samples[i, ] <- sample(1:nrow(data), replace = TRUE)
}
# Estimate the probability of tree presence for each altitude and bootstrap sample
probs <- matrix(0, nrow = B, ncol = 3)
for (i in 1:B) {
data_boot <- data[samples[i, ], ]
model_boot <- glm(presence ~ altitude, data = data_boot, family = binomial)
for (j in 1:3) {
probs[i, j] <- predict(model_boot, newdata = data.frame(altitude = c(100, 300, 600)[j]), type = "response")
}
}
# Calculate the mean and standard deviation of the probability estimates for each altitude
means <- apply(probs, 2, mean)
sds <- apply(probs, 2, sd)
# Compute the confidence intervals for the probability estimates for each altitude
ci <- matrix(0, nrow = 3, ncol = 2)
for (i in 1:3) {
ci[i, ] <- c(quantile(probs[, i], alpha / 2), quantile(probs[, i], 1 - alpha / 2))
}
# Print the results
cat("Altitude 100 m:", "Mean:", round(means[1], 3), "CI:", round(ci[1, 1], 3), "-", round(ci[1, 2], 3), "\n")
cat("Altitude 300 m:", "Mean:", round(means[2], 3), "CI:", round(ci[2, 1], 3), "-", round(ci[2, 2], 3), "\n")
cat("Altitude 600 m:", "Mean:", round(means[3], 3), "CI:", round(ci[3, 1], 3), "-", round(ci[3, 2], 3), "\n")
View(samples)

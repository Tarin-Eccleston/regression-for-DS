plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(min(chd.df$age), max(chd.df$age), length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
# Use linear regression. Poisson regression is most suitable in this case.
# The expected value must be above 0, so linear regression doesn't give meaningful prediction sometimes.
crabs.fit <- lm(sats ~ weight, data = crabs.df)
plot(sats ~ weight, data = crabs.df)
abline(crabs.fit$coefficients[1], crabs.fit$coefficients[2])
# Poisson regression
crabs.logfit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
# We cannot plot curve in R, so use sequence.
xx <- seq(min(crabs.df$weight), max(crabs.df$weight), length.out = 101)
# The linear predictor gives log of mew. Log being the link function. To get mew, don't need to exponentiate, specify type as response.
yy <- predict(crabs.logfit, newdata = data.frame(weight = xx), type = 'response')
plot(sats ~ weight, data = crabs.df)
lines(yy ~ xx)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
# Create new matrix, age from sample, and predicted likelihood of chd to the response
cbind(chd.df$age, fitted(chd.fit))
# flipping "coin" for each person from age 20 -> 63
n.people <- nrow(chd.df)
new.chd <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
par(mfrow = c(1, 2))
plot(chd ~ age, data = chd.df, main = "Original")
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
plot(new.chd ~ age, data = chd.df, main = "Simulated")
new.fit <- glm(new.chd ~ age, family = binomial("probit"), data = chd.df)
yy <- predict(new.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
git
git init
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, type = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, family = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
summary(fit.boot)
apply(coef.boot, 2, sd)
git help
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot.new
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)
abline(xx, yy)
```{r echo = TRUE, fig.keep='all'}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
abline(xx, yy)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
plot.new()
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)
```{r fig.new=TRUE}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
plot.new()
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)
plot.new()
{plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
{plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
{plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
{plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
```{r}
hmds = influence(frog_fit)$hat
print(max(hmds))
plot(frog_fit,which=1:6)
View(frog_df)
mic_3 = frog_df %>%
filter(mic.id == 3)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
library(tidyverse)
mic_3 = frog_df %>%
filter(mic.id == 3)
View(mic_3)
plot(frog_fit,which=1:6)
mic_3 = frog_df %>%
filter(mic.id == 1)
mic_3 = frog_df %>%
filter(mic.id == 1)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 0)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 2)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 4)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 5)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 6)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 7)
View(mic_3)
mic_3 = frog_df %>%
filter(mic.id == 3)
View(mic_3)
plot(frogs_fit, which=5)
plot(frog_fit, which=5)
plot(frog_fit, which=5)
print(frog_df(157,))
print(frog_df[157,])
print(frog_df[143,])
plot(frog_fit, which=4)
plot(frog_fit, which=4)
# plot std. pearson residual plot vs leverage plot to see high leverage and influential
# observations
plot(frog_fit, which=1:5)
# plot std. pearson residual plot vs leverage plot to see high leverage and influential
# observations
plot(frog_fit, which=1:6)
# hmds = influence(frog_fit)$hat
# plot HMD
HMD = hatvalues(frog_fit)
{plot(HMD, ylab="HMD", type="h", cex=1.5, cex.axis=1.5, cex.lab=1.5)
text(HMD)
abline(h=3*3/nrow(frog_df), lty=2)}
# hmds = influence(frog_fit)$hat
# plot HMD
HMD = hatvalues(frog_fit)
{plot(HMD, ylab="HMD", type="h", cex=1.5, cex.axis=1.5, cex.lab=1.5)
abline(h=3*3/nrow(frog_df), lty=2)}
# hmds = influence(frog_fit)$hat
# plot HMD
HMD = hatvalues(frog_fit)
{plot(HMD, ylab="HMD", type="h", cex=1.5, cex.axis=1.5, cex.lab=1.5)
largest = order(HMD, decreasing = TRUE)[1:10]
text(largest)
abline(h=3*3/nrow(frog_df), lty=2)}
largest = order(HMD, decreasing = TRUE)[1:10]
# hmds = influence(frog_fit)$hat
# plot HMD
HMD = hatvalues(frog_fit)
{plot(HMD, ylab="HMD", type="h", cex=1.5, cex.axis=1.5, cex.lab=1.5)
largest = order(HMD, decreasing = TRUE)[1:10]
text(frog_df[largest], frog_df[largest], labels = largest, pos = 4)
abline(h=3*3/nrow(frog_df), lty=2)}
largest
HMD[24]
HMD[23]
# plot std. pearson residual plot vs leverage plot to see high leverage and influential
# observations
plot(frog_fit, which=4)
plot(frog_fit, which=5)
# plot std. pearson residual plot vs leverage plot to see high leverage and influential
# observations
{plot(frog_fit, which=4)
plot(frog_fit, which=5)}
mic_obs_24 = frog_df[24,]$mic.id
```{r}
mic_obs_24 = frog_df[24,]$mic.id
mic_obs_143 = frog_df[143,]$mic.id
mic_obs_157 = frog_df[157,]$mic.id
{
mic_obs_24
mic_obs_143
mic_obs_157
}
cbind(mic_obs_24, mic_obs_143, mic_obs_157)
row.names("hello")
influential_mic_obs = cbind(mic_obs_24, mic_obs_143, mic_obs_157)
row.names("hello")
View(influential_mic_obs)
rownames("hello")
View(influential_mic_obs)
rownames(influential_mic_obs) = 'hello'
View(influential_mic_obs)
influential_mic_obs = cbind(mic_obs_24, mic_obs_143, mic_obs_157)
rownames(influential_mic_obs) = 'mic.id'
influential_mic_obs
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3)
mic_3
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3)
select(-c(mix.x, mix.y, animal.x, animal.y))
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(-c(mix.x, mix.y, animal.x, animal.y))
mic_3
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(-(mix.x, mix.y, animal.x, animal.y))
mic_3
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(-mix.x)
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(mic.id, animal.id, detected, n.calls)
mic_3
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(mic.id, animal.id, distance, detected, n.calls)
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(mic.id, animal.id, dist, detected, n.calls)
mic_3
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
library(tidyverse)
frog_df = read.csv("data/frogs.csv")
# find the absolute distance between the frog and each microphone
frog_df$distance = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
# get the probability of that particular microphone detected that particular frog
# based on the number of calls the frog makes and the detected amount from the mic
frog_df$prob = frog_df$detected / frog_df$n.calls
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ distance, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
summary(frog_fit)
xx <- seq(min(frog_df$distance), max(frog_df$distance), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(distance = xx), type = "response")
{plot(prob ~ distance, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
```{r}
mic_3 = frog_df %>%
filter(mic.id == 3) %>%
select(mic.id, animal.id, distance, detected, n.calls)
mic_3
plot(frog_fit, which=3)
plot(frog_fit, which=2)
# plot Cook's Distance, std. pearson residual plot vs leverage plot to see high leverage and influential observations
{
plot(frog_fit, which=2)
plot(frog_fit, which=4)
plot(frog_fit, which=5)
}
# plot Cook's Distance, std. pearson residual plot vs leverage plot to see high leverage and influential observations
{
plot(frog_fit, which=2)
plot(frog_fit, which=4)
plot(frog_fit, which=5)
}
```{r}
frog_corrected_df = frog_df %>%
filter(mic.id == !3)
View(frog_corrected_df)
```{r}
frog_corrected_df = frog_df %>%
filter(mic.id == 3)
View(frog_corrected_df)
```{r}
frog_corrected_df = frog_df %>%
filter(mic.id != 3)
View(frog_corrected_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ distance, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$distance), max(frog_df$distance), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(distance = xx), type = "response")
{plot(prob ~ distance, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
lines(xx, yy)}
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ distance, family = "binomial", data = frog_corrected_df)
summary(frog_fit)
xx <- seq(min(frog_corrected_df$distance), max(frog_corrected_df$distance), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(distance = xx), type = "response")
{plot(prob ~ distance, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_corrected_df)
lines(xx, yy)}
```{r}
plot(frog_fit, which=2)
plot(frog_corrected_fit, which=2)
# remove mic 3 observations
frog_corrected_df = frog_df %>%
filter(mic.id != 3)
# fit model again and show improvement in fit
frog_corrected_fit <- glm(cbind(detected, n.calls - detected) ~ distance, family = "binomial", data = frog_corrected_df)
summary(frog_corrected_fit)
xx <- seq(min(frog_corrected_df$distance), max(frog_corrected_df$distance), length.out = 1000)
yy <- predict(frog_corrected_fit, newdata = data.frame(distance = xx), type = "response")
{plot(prob ~ distance, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_corrected_df)
lines(xx, yy)}
plot(frog_corrected_fit, which=4)
plot(frog_corrected_fit, which=5)
View(frog_corrected_df)
View(frog_corrected_df)
# clean data, remove multilinear variables such as mic and frog coordinates used
# to calculate distance
frog_corrected_df = frog_corrected_df %>%
select(-mic.x)
View(frog_corrected_df)
# clean data, remove multilinear variables such as mic and frog coordinates used
# to calculate distance
frog_corrected_df = frog_corrected_df %>%
select(-mic.x, -mic.y, -animal.x, -animal.y)
View(frog_corrected_df)
View(frog_corrected_df)
# clean data, remove multilinear variables such as mic and frog coordinates used
# to calculate distance
frog_corrected_df = frog_corrected_df %>%
select(animal.id, mic.id, distance, detected, n.calls, prob)
View(frog_corrected_df)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected + animal.d + mic.id) ~ distance, family = "binomial", data = frog_corrected_df)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected + animal.id + mic.id) ~ distance, family = "binomial", data = frog_corrected_df)
summary(frog_corrected_fit)
xx <- seq(min(frog_corrected_df$distance), max(frog_corrected_df$distance), length.out = 1000)
yy <- predict(frog_corrected_fit, newdata = data.frame(distance = xx), type = "response")
{plot(prob ~ distance, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_corrected_df)
lines(xx, yy)}
pairs(frog_corrected_df)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected) ~ distance + animal.id + mic.id, family = "binomial", data = frog_corrected_df)
summary(frog_corrected_fit)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected) ~ distance + mic.id, family = "binomial", data = frog_corrected_df)
summary(frog_corrected_fit)
library(MuMIn)
install.packages(MuMIn)
install.packages("MuMIn")
library(MuMIn)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected) ~ distance + mic.id + animal.id + distance * mic.id + distance * animal.id + mic.id * animal.id, family = "binomial", data = frog_corrected_df)
summary(frog_corrected_fit)]
summary(frog_corrected_fit)
best_fit = dredge(frog_corrected_fit)
options(na.action = "na.fail")
best_fit = dredge(frog_corrected_fit)
View(best_fit)
head(best_fit)
View(best_fit)
# remove multicollinear variables such as mic and frog coordinates used
# to calculate absolute distance
frog_corrected_df = frog_corrected_df %>%
select(animal.id, mic.id, distance, detected, n.calls, prob)
frog_corrected_fit <- glm(cbind(detected, n.calls - detected) ~ distance + mic.id + animal.id + distance * mic.id + distance * animal.id + mic.id * animal.id, family = "binomial", data = frog_corrected_df)
options(na.action = "na.fail")
best_fit = dredge(frog_corrected_fit)
head(best_fit)
View(best_fit)
options(na.action = "na.fail")
all_fit = dredge(frog_corrected_fit)
head(best_fit)
best_model = get.model(all_fit, 7)[[1]]
best_model = get.models(all_fit, 7)[[1]]
best_model
best_model = get.models(all_fit, 7)[[7]]
best_model
best_model = get.models(all_fit, 2)[[2]]
best_model
best_model = get.models(all_fit, 1)[[1]]
best_model
best_model = get.models(all_fit, 0)[[0]]
best_model
best_model = get.models(all_fit, 1)[[1]]
best_model
best_model = get.models(all_fit, 2)[[2]]
best_model
best_model = get.models(all_fit, 2)[[1]]
best_model
options(na.action = "na.fail")
all_fit = dredge(frog_corrected_fit)
{
head(best_fit)
plot(all_fit,col="blue")
}
options(na.action = "na.fail")
all_fit = dredge(frog_corrected_fit)
{
head(all_fit)
plot(all_fit,col="blue")
}

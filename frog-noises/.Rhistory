catheter.df <- read.table("catheter.data", header = TRUE)
catheter.fit <- lm(ca ~ ht, data = catheter.df)
summary(catheter.fit)
# MUST Label Axis
plot(ca ~ ht, data = catheter.df, xlab = "Height (inches)", ylab = "Catheter Lenght (inches)")
abline(coef(catheter.fit)[1], coef(catheter.fit)[2])
source("~/Documents/Masters/STATS 762/Exercises/Catheter Analysis/catheter_analysis.R")
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/Exercises/Catheter Analysis")
catheter.df <- read.table("catheter.data", header = TRUE)
catheter.fit <- lm(ca ~ ht, data = catheter.df)
summary(catheter.fit)
# MUST Label Axis
plot(ca ~ ht, data = catheter.df, xlab = "Height (inches)", ylab = "Catheter Lenght (inches)")
abline(coef(catheter.fit)[1], coef(catheter.fit)[2])
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
crabs.fit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
summary(crabs.df)
xx <- seq(0, 6, length.out = 100)
yy <- predict(crabs.df, newdata = data.frame(weight = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(min(chd.df$age), max(chd.df$age), length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
# Use linear regression. Poisson regression is most suitable in this case.
# The expected value must be above 0, so linear regression doesn't give meaningful prediction sometimes.
crabs.fit <- lm(sats ~ weight, data = crabs.df)
plot(sats ~ weight, data = crabs.df)
abline(crabs.fit$coefficients[1], crabs.fit$coefficients[2])
# Poisson regression
crabs.logfit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
# We cannot plot curve in R, so use sequence.
xx <- seq(min(crabs.df$weight), max(crabs.df$weight), length.out = 101)
# The linear predictor gives log of mew. Log being the link function. To get mew, don't need to exponentiate, specify type as response.
yy <- predict(crabs.logfit, newdata = data.frame(weight = xx), type = 'response')
plot(sats ~ weight, data = crabs.df)
lines(yy ~ xx)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
# Create new matrix, age from sample, and predicted likelihood of chd to the response
cbind(chd.df$age, fitted(chd.fit))
# flipping "coin" for each person from age 20 -> 63
n.people <- nrow(chd.df)
new.chd <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
par(mfrow = c(1, 2))
plot(chd ~ age, data = chd.df, main = "Original")
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
plot(new.chd ~ age, data = chd.df, main = "Simulated")
new.fit <- glm(new.chd ~ age, family = binomial("probit"), data = chd.df)
yy <- predict(new.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
git
git init
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, type = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, family = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
summary(fit.boot)
apply(coef.boot, 2, sd)
git help
confint(model,"X1", level=0.95)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/information-criteria")
X <- read.csv("data/X.csv", header = TRUE)
# 1)
pairs(X)
beta_true = c(10, 2, 3, 1)
sigma = 4
# generate regression line based on the given "true" parameters
mu = beta_true[1] + beta_true[2]*X$X1 + beta_true[3]*X$X2 + beta_true[4]*X$X1*X$X2
# simulate of the normal distribution
X$Y = rnorm(nrow(X), mu, 4)
pairs(X)
# 3)
model = lm(Y ~ X1*X2, data = X)
beta_hat = summary(model)$coef[,1]
confint(model,"X1", level=0.95)
summary(model)
getwd()
set("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance)
aq = data.frame(airquality)
exit(0)
aq = data.frame(airquality)
set("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance)
set("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance)
aq = data.frame(airquality)
set("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
set("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
aq = data.frame(airquality)
View(aq)
aq_data = data.frame(airquality)
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
aq_data = data.frame(airquality)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
aq_data = data.frame(airquality)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
dev.off()
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
dev.new(width=10, height=5, unit="in")
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
dev.new(width=100, height=500, unit="in")
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
dev.new(width=500, height=500, unit="in")
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot(log(Ozone) ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot(log(Ozone) ~ Solar.R|Temp * Wind, data = aq_data, n = 4)
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot(log(Ozone) ~ Solar.R|Temp * Wind, data = aq_data, n = 4)
setwd("/Users/tarineccleston/Documents/Masters/STATS 765/statistical-learning-for-DS/regression-bias-variance")
aq_data = data.frame(airquality)
# we want to model effect of solar radiation on temperature
# we want to take temperature and wind into consideration
# plot ozone as explained by solar radiation, given each combination of temp and wind
coplot(Ozone ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot(log(Ozone) ~ Solar.R|Temp * Wind, data = aq_data, n = 4)
# EOV Assumption:
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot(log(Ozone) ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# EOV Assumption:
# scatter appears to increase (variance) as ozone increase, use poisson distribution
# to model behavior
coplot((Ozone) ~ Solar.R|Temp + Wind, data = aq_data, n = 4)
# now, consider interaction between solar radiation and temperature, and solar
# radiation and wind on the original scale
aq_fit = lm(Ozone ~ Solar.R * (Temp + Wind), data = aq_data)
summary(aq_fit)
# now compare interaction terms when using log scale.
aq_fit = lm(log(Ozone) ~ Solar.R * (Temp + Wind), data = aq_data)
summary(aq_fit)
# under conditions when we don't know our model, we can use the sanwich estimator
# to get the covariance matrix in our data
library(sandwich)
# sandwich estimator (HC = Heteroskedasticity-consistent estimation)
fit = lm(Ozone ~ Wind, data = aq_data)
sqrt(diag(vcovHC(fit)))
# standard lm estimate
sqrt(diag(vcov(fit)))
plot(fit)
plot(fit, which=1)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
View(frog_df)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/frog-noises")
frog_df = read.csv("data/frogs.csv")
View(frog_df)
View(frog_df)
frog_df$dist = sqrt((abs(frog_df$mic.x - frog_df$animal.x)^2) + (abs(frog_df$mic.y - frog_df$animal.y)^2))
frog_df$prob = frog_df$n.calls / frog_df$detected
View(frog_df)
frog_df$prob = frog_df$detected / frog_df$n.calls
plot(prob ~ dist, data =- frog_df)
plot(prob ~ dist, data = frog_df)
View(frog_df)
# fit model
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
# fit model
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
# fit model
frog_fit <- glm(prob ~ dist, family = "binomial", data = chd.df)
# fit model
frog_fit <- glm(prob ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
# fit model
frog_fit <- glm(prob ~ dist, family = "binomial", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
plot(prob ~ dist, data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot(cbind(detected, n.calls - detected) ~ dist, data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
plot(cbind(detected, n.calls - detected) ~ dist, data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
plot(prob ~ dist, data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_fit$dist), max(frog_fit$dist), length.out = 1000)
View(frog_df)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)
ylaberl("probability that the frog noise was detected by the mic")
ylabel("probability that the frog noise was detected by the mic")
plot(prob ~ dist, data = frog_df)
xlabel("distance from microphone source")
ylabel("probability that the frog noise was detected by the mic")
ylab("probability that the frog noise was detected by the mic")
xlab("distance from microphone source")
ylab("probability that the frog noise was detected by the mic")
plot(prob ~ dist, xlab = "distance from microphone source", ylab = "probability that the frog noise was detected by the mic", data = frog_df)
plot(prob ~ dist, main = "Distance from mic vs Probability of Noise Detection", xlab = "Distance from mic source (m)", ylab = "Probability of noise detection", data = frog_df)
plot(prob ~ dist, main = "Distance of Frog from Mic vs Probability of Noise Detection", xlab = "Distance of Frog from Mic (m)", ylab = "Probability of Noise Detection", data = frog_df)
# fit model
frog_fit <- glm(cbind(detected, n.calls - detected) ~ dist, family = "binomial", data = frog_df)
summary(frog_fit)
xx <- seq(min(frog_df$dist), max(frog_df$dist), length.out = 1000)
yy <- predict(frog_fit, newdata = data.frame(dist = xx), type = "response")
lines(xx, yy)

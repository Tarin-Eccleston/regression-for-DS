chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
chd.df <- read.table("chd.data", header = TRUE)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(min(chd.df$age), max(chd.df$age), length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
crabs.df <- read.table("crab.data", header = TRUE)
plot(sats ~ weight, data = crabs.df)
# Use linear regression. Poisson regression is most suitable in this case.
# The expected value must be above 0, so linear regression doesn't give meaningful prediction sometimes.
crabs.fit <- lm(sats ~ weight, data = crabs.df)
plot(sats ~ weight, data = crabs.df)
abline(crabs.fit$coefficients[1], crabs.fit$coefficients[2])
# Poisson regression
crabs.logfit <- glm(sats ~ weight, data = crabs.df, family = "poisson")
# We cannot plot curve in R, so use sequence.
xx <- seq(min(crabs.df$weight), max(crabs.df$weight), length.out = 101)
# The linear predictor gives log of mew. Log being the link function. To get mew, don't need to exponentiate, specify type as response.
yy <- predict(crabs.logfit, newdata = data.frame(weight = xx), type = 'response')
plot(sats ~ weight, data = crabs.df)
lines(yy ~ xx)
chd.fit <- glm(chd ~ age, family = "binomial", data = chd.df)
summary(chd.fit)
plot(chd ~ age, data = chd.df)
xx <- seq(10, 80, length.out = 1000)
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
# Create new matrix, age from sample, and predicted likelihood of chd to the response
cbind(chd.df$age, fitted(chd.fit))
# flipping "coin" for each person from age 20 -> 63
n.people <- nrow(chd.df)
new.chd <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
par(mfrow = c(1, 2))
plot(chd ~ age, data = chd.df, main = "Original")
yy <- predict(chd.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
plot(new.chd ~ age, data = chd.df, main = "Simulated")
new.fit <- glm(new.chd ~ age, family = binomial("probit"), data = chd.df)
yy <- predict(new.fit, newdata = data.frame(age = xx), type = "response")
lines(xx, yy)
git
git init
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, type = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
n.boots <- 1000
coef.boot <- matrix(0, nrow = n.boots, ncol = 2)
agep80.boot <- numeric(n.boots)
for (i in 1:n.boots){
chd.boot <- rbinom(n.people, 1, predict(chd.fit, type = "response"))
fit.boot <- glm(chd.boot ~ age, family = "binomial", data = chd.df)
coef.boot[i, ] <- coef(fit.boot)
agep80.boot[i] <- (0.84162 - coef(fit.boot)[1])/coef(fit.boot)[2]
}
summary(fit.boot)
apply(coef.boot, 2, sd)
git help
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
# fitting data
manta_fit = lm(DW ~ DL + CW + sex, data = manta_df)
summary(manta_fit)
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
mew = X %*% beta_hat
head(mew)
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
row_hat_sq = RSS/(nrow(X) - ncol(X))
SE = sqrt(row_hat_sq) / (nrow(X)^2)
t_stat = beta_hat/SE
p_value = 2*(1-pt(t_stat, 20))
beta_CI = cbind(beta_hat - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*SE)
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
View(Y_pred)
var_hat_sq = RSS/(nrow(X) - ncol(X))
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
t_stat = beta_hat/std_err
p_value = 2*(1-pt(t_stat, 20))
beta_CI = cbind(std_err - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*std_err)
View(beta_CI)
colnames(beta_CI) = c("2.5%", "97.5%")
View(beta_CI)
View(p_value)
View(cov)
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p_value")
View(p_value)
beta_CI = cbind(std_err - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*std_err)
colnames(beta_CI) = c("2.5%", "97.5%")
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
View(X_pred)
View(beta_hat)
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("1", "DL", "CW", "sex")
View(X_pred)
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
rownames(X_pred) =  c("Evelyn", "Morag")
colnames(X_pred) = c("1", "DL", "CW", "sex")
View(X_pred)
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
View(Y_pred)
pred_var = as.matrix(diag(X_pred %*% cov %*% t(X_pred)))
View(pred_var)
pred_SE = sqrt(Y_pred_var)
pred_SE = sqrt(pred_var)
View(cov)
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
pred_var = as.matrix(diag(X_pred %*% cov %*% t(X_pred)))
pred_SE = sqrt(pred_var)
pred_CI = cbind(Y_pred - qt(0.975, df = 20)*pred_SE, Y_pred + qt(0.975, df = 20)*pred_SE)
View(pred_CI)
View(pred_CI)
colnames(pred_CI) = c("2.5%", "97.5%")
View(pred_CI)
View(pred_var)
library(ggplot2)
# plotting data
pairs(manta_df)
# combine variances and calculate combined standard error
comb_var = pred_var + var_hat_sq
comb_SE = sqrt(comb_var)
pred_PI = cbind(Y_pred - qt(0.975, df = 20)*comb_SE, Y_pred + qt(0.975, df = 20)*comb_SE)
View(pred_PI)
colnames(pred_CI) = c("2.5%", "97.5%")
colnames(pred_PI) = c("2.5%", "97.5%")
View(beta_hat)
View(beta_hat)
summary_custom <- function(X, Y) {
# estimate coefficients
# ______________________
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
colnames(t_stat) = c("estimates")
# standard error
# ______________________
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
var_hat_sq = RSS/(nrow(X) - ncol(X))
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
colnames(t_stat) = c("stderr")
# t-test statistics
# ______________________
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
# p-value
# ______________________
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
return(beta_hat, std_err, t_stat, p_value)
}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
library(ggplot2)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
# fitting data
manta_fit = lm(DW ~ DL + CW + sex, data = manta_df)
summary(manta_fit)
# plotting data, best to use pairs plot as this shows the relationships between each
# variable
pairs(manta_df)
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
Y = as.matrix(manta_df[,2])
summary_custom <- function(X, Y) {
# estimate coefficients
# ______________________
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
colnames(t_stat) = c("estimates")
# standard error
# ______________________
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
var_hat_sq = RSS/(nrow(X) - ncol(X))
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
colnames(t_stat) = c("stderr")
# t-test statistics
# ______________________
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
# p-value
# ______________________
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
return(beta_hat, std_err, t_stat, p_value)
}
View(summary_custom)
View(summary_custom)
View(summary_custom)
summary(manta_df)
summary(manta_fit)
DW_ratio = Y_pred[1] / Y_pred[2]
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
library(ggplot2)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
# fitting data
manta_fit = lm(DW ~ DL + CW + sex, data = manta_df)
summary(manta_fit)
# plotting data, best to use pairs plot as this shows the relationships between each
# variable
pairs(manta_df)
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
mew = X %*% beta_hat
head(mew)
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
var_hat_sq = RSS/(nrow(X) - ncol(X))
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
beta_CI = cbind(std_err - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*std_err)
colnames(beta_CI) = c("2.5%", "97.5%")
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
rownames(X_pred) =  c("Evelyn", "Morag")
colnames(X_pred) = c("1", "DL", "CW", "sex")
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
pred_var = as.matrix(diag(X_pred %*% cov %*% t(X_pred)))
pred_SE = sqrt(pred_var)
pred_CI = cbind(Y_pred - qt(0.975, df = 20)*pred_SE, Y_pred + qt(0.975, df = 20)*pred_SE)
colnames(pred_CI) = c("2.5%", "97.5%")
# combine variances and calculate combined standard error
comb_var = pred_var + var_hat_sq
comb_SE = sqrt(comb_var)
pred_PI = cbind(Y_pred - qt(0.975, df = 20)*comb_SE, Y_pred + qt(0.975, df = 20)*comb_SE)
colnames(pred_PI) = c("2.5%", "97.5%")
DW_ratio = Y_pred[1] / Y_pred[2]
DW_ratio =  Y_pred[2] / Y_pred[1]
DW_ratio =  (1 - Y_pred[2] / Y_pred[1]) * 100
View(Y_pred)
DW_ratio =  (Y_pred[2] / Y_pred[1] - 1) * 100
beta_CI = cbind(std_err - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*std_err)
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
library(ggplot2)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
# fitting data
manta_fit = lm(DW ~ DL + CW + sex, data = manta_df)
summary(manta_fit)
# plotting data, best to use pairs plot as this shows the relationships between each
# variable
pairs(manta_df)
```{r}
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
```{r}
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
### Question 1(b): Create plots to investigate relationships between the variables in this data set. Briefly comment on the plots (2–3 sentences).
```{r}
setwd("/Users/tarineccleston/Documents/Masters/STATS 762/regression-for-DS/manta-disc-width")
library(tidyverse)
library(ggplot2)
manta_df = read.csv("data/manta-measurements.csv")
# convert F to 0, and M to 1 for the normal regression model
manta_df$sex = gsub('F', 0, manta_df$sex)
manta_df$sex = gsub('M', 1, manta_df$sex)
manta_df$sex = as.numeric(manta_df$sex)
# fitting data
manta_fit = lm(DW ~ DL + CW + sex, data = manta_df)
summary(manta_fit)
# plotting data, best to use pairs plot as this shows the relationships between each
# variable
pairs(manta_df)
# plotting data, best to use pairs plot as this shows the relationships between each
# variable
pairs(manta_df)
- Clear linear relationship between disc length and disc width, disc length and
### Question 1(c): Create the model’s design matrix. Only print out the first six rows.
```{r}
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
# append a column of 1s at the beginning for the intercept. remove the response variable (disc width)
# make sure X and Y are in matrix form for the calculation
X = as.matrix(cbind(1, manta_df[,-2]))
### Question 1(d): Calculate βb, the vector of estimated coefficients.
```{r}
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
### Question 1(e): Calculate μb, the vector of estimated expected values (or “fitted values”). Only print out the first six values.
```{r}
mew = X %*% beta_hat
head(mew)
colnames(beta_hat) = c("beta_hat")
View(beta_hat)
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
colnames(beta_hat) = c("beta_hat")
### Question 1(e): Calculate μb, the vector of estimated expected values (or “fitted values”). Only print out the first six values.
```{r}
mew = X %*% beta_hat
colnames(mew) = c("mew")
head(mew)
X
head(X)
Y = as.matrix(manta_df[,2])
# calculation
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
colnames(beta_hat) = c("beta_hat")
beta_hat
mew = X %*% beta_hat
colnames(mew) = c("mew")
head(mew)
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
var_hat_sq = RSS/(nrow(X) - ncol(X))
var_hat_sq
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
std_err
```{r}
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
```{r}
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
t_stat
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
p_value
```{r}
beta_CI = cbind(std_err - qt(0.975, df = 20)*SE, beta_hat + qt(0.975, df = 20)*std_err)
beta_CI = cbind(std_err - qt(0.975, df = 20)*std_err, beta_hat + qt(0.975, df = 20)*std_err)
colnames(beta_CI) = c("2.5%", "97.5%")
beta_CI
# build new design matrix based on the given data
X_pred = cbind(c(1, 1), c(1.3, 1.625), c(0.75, 0.9375), c(0, 0))
rownames(X_pred) =  c("Evelyn", "Morag")
colnames(X_pred) = c("1", "DL", "CW", "sex")
X_pred
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
Y_pred
Y_pred
X_pred
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
Y_pred
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
Y_pred
### Question 1(k): Calculate confidence intervals for Morag’s and Evelyn’s expected disc widths.
Calculate prediction variance and standard errors from new design matrix
```{r}
```{r}
pred_var = as.matrix(diag(X_pred %*% cov %*% t(X_pred)))
# getting prediction
Y_pred = X_pred %*% beta_hat
rownames(Y_pred) =  c("Evelyn", "Morag")
colnames(Y_pred) = c("DW")
Y_pred
```{r}
pred_var = as.matrix(diag(X_pred %*% cov %*% t(X_pred)))
View(pred_var)
pred_SE = sqrt(pred_var)
pred_CI = cbind(Y_pred - qt(0.975, df = 20)*pred_SE, Y_pred + qt(0.975, df = 20)*pred_SE)
colnames(pred_CI) = c("2.5%", "97.5%")
pred_CI
# combine variances and calculate combined standard error
comb_var = pred_var + var_hat_sq
comb_SE = sqrt(comb_var)
pred_PI = cbind(Y_pred - qt(0.975, df = 20)*comb_SE, Y_pred + qt(0.975, df = 20)*comb_SE)
colnames(pred_PI) = c("2.5%", "97.5%")
pred_PI
summary_custom <- function(X, Y) {
# estimate coefficients
# ______________________
beta_hat = solve(t(X) %*% X) %*% t(X) %*% Y
colnames(t_stat) = c("estimates")
# standard error
# ______________________
# calculate RSS first
RSS = 0
Yhat = X %*% beta_hat
for (i in 1:nrow(X)) {
diff_i = Y[i] - Yhat[i]
RSS = RSS + (diff_i)^2
}
var_hat_sq = RSS/(nrow(X) - ncol(X))
cov = var_hat_sq*solve(t(X)%*%X)
std_err = sqrt(diag(cov))
colnames(t_stat) = c("stderr")
# t-test statistics
# ______________________
t_stat = beta_hat/std_err
colnames(t_stat) = c("t-stat")
# p-value
# ______________________
p_value = 2*(1-pt(t_stat, 20))
colnames(p_value) = c("p-value")
return(beta_hat, std_err, t_stat, p_value)
}
DW_ratio =  (Y_pred[2] / Y_pred[1] - 1) * 100
DW_ratio
DW_ratio =  round((Y_pred[2] / Y_pred[1] - 1) * 100, digits = 3)
DW_ratio
